<!-- <!-- **1.What is JavaScript?** -->

    ```javascript
    # JavaScript (JS) is a programming language used to make web pages interactive. It is one of the key technologies of the web, along with HTML and CSS. With JavaScript, you can add things like sliders, popups, and buttons that respond when clicked. Besides the browser, JavaScript is also used in other places like Node.js for server-side coding, Electron for desktop apps, and React Native for mobile apps.
    ```


**2.Javascript Variables?**

   ```javascript
   javascript Most of the time, a JavaScript application needs to work with information. To store and represent this information in the JavaScript codebase, we use variables. A variable is a container for a value.
    
   ```

    ```javascript
    Variable Declarations
    To use variables in JavaScript, we first need to create it i.e. declare a variable. To declare variables, we use one of the var, let, or const keywords.
    ```

    // Using var
   ```javascript
    var name = "Alice";
    var age = 25;
   ```

    // Using let
   ```javascript
    let city = "New York";
   ```

    // Using const

    ```javascript
    const country = "USA";
    ```

    // Output the variables
```javascript
    console.log("Name:", name);
    console.log("Age:", age);
    console.log("City:", city);
    console.log("Country:", country);
``` -->


    

    var declares a variable that can be redeclared and reassigned.
    let declares a block-scoped variable that can be reassigned but not redeclared in the same scope.
    const declares a block-scoped variable that cannot be reassigned or redeclared. 

    



<!-- 3.What is Hoisting?

    ```javascript
    Hoisting in JavaScript is when variable and function declarations are automatically moved to 
    the top of the code before it runs. This lets you use variables and functions before they're written, 
    but only the declaration is moved, not the value or code.
    ```

    ```javascript
    console.log(greeting); // Output: undefined
    var greeting = "Hello";

    // The above code works like this because of hoisting:
    var greeting;
    console.log(greeting); // Output: undefined
    greeting = "Hello";

    ``` -->



<!-- 4.Datatypes

```javascript
Data type refers to the type of data that a JavaScript variable can hold. There are seven primitive data types in JavaScript (Number, BigInt, String, Boolean, Null, Undefined and Symbol). Objects and arrays are non-primitives.
```

```javascript
Number: Used for any kind of number, like 5 or 3.14.
String: Used for text, like "Hello" or 'JavaScript'.
Boolean: Represents true or false.
Undefined: A variable that has been declared but not given a value.
Null: Represents an empty or non-existent value.
Object: Used for more complex data like arrays, functions, or other objects.
Symbol: A unique and immutable value, mainly used in more advanced programming.
BigInt: For working with numbers larger than the regular Number type can handle. -->
```






```javascript
Object in Js
```
```javascript
In JavaScript, an object is a way to store data using key-value pairs. Each key has a value, and the value can be of any data type. 
```

```javascript
// Creating an object
const pen = {
  color: "blue",
  design: "smooth",
  material: "plastic",
  price:1000
};

// Accessing object properties
console.log(pen.color);     // Output: blue
console.log(pen.design);    // Output: smooth
console.log(pen.material);  // Output: plastic
```

```javascript
// Creating a car object
const car = {
  brand: "Toyota",
  model: "Corolla",
  year: 2022,
  isElectric: false,
  features: ["Air Conditioning", "Bluetooth", "Backup Camera"],
};

// Accessing object properties
console.log(car.brand);     // Output: Toyota
console.log(car.model);     // Output: Corolla
console.log(car.year);      // Output: 2022
console.log(car.isElectric); // Output: false
console.log(car.features);  // Output: ["Air Conditioning", "Bluetooth", "Backup Camera"]
```




```javascript
Js Array


Arrays in JavaScript are used to store multiple values in a single variable.
Each value in an array is called an element, and the elements are indexed starting from 0.


// Creating an array
const fruits = ["Apple", "Banana", "Cherry"];

// Accessing array elements
console.log(fruits[0]); // Output: Apple
console.log(fruits[1]); // Output: Banana
console.log(fruits[2]); // Output: Cherry

// Adding an element to the array
fruits.push("Date");
console.log(fruits); // Output: ["Apple", "Banana", "Cherry", "Date"]

// Removing the last element
fruits.pop();
console.log(fruits); // Output: ["Apple", "Banana", "Cherry"]



 // Removing the first element
fruits.shift()
console.log(fruits)


// Adding an element to the array
 fruits.unshift("Mango")
 console.log(fruits)
 
```

// const fruits = ["Apple", "Banana", "Cherry"];
// console.log("fruits : ",fruits)

// Accessing the length of the array
console.log("fruits.length : ",fruits.length);

// // Concatenating arrays
const moreFruits = ["Date", "Elderberry"];
const allFruits = fruits.concat(moreFruits);
console.log("fruits.concat : ",allFruits);

// // Finding an element's index
const index = fruits.indexOf("Banana");
console.log("Find element index : ",index);

// // Checking if an array includes a value
const hasCherry = fruits.includes("Cherry");
console.log("includes : ",hasCherry);


const SliceFruits = fruits.slice()
console.log("SliceFruits",SliceFruits)

// // Reversing the array
const reversedFruits = fruits.reverse();
console.log("ReversedArray",reversedFruits);

// Sorting the array alphabetically
const sortedFruits = fruits.sort();
// console.log("Sort Array",sortedFruits);

// // Slicing the array (getting a portion)
const slicedFruits = fruits.slice(0,2 );
console.log("SlicedFruits",slicedFruits);

// // Splicing (removing or replacing elements)
fruits.splice(1, 1, "Blueberry","apple");
console.log(fruits);

// // Mapping over the array (creating a new array with modified elements)
const upperCaseFruits = fruits.map(data => data.toUpperCase());
console.log(upperCaseFruits); // Output: ["APPLE", "BLUEBERRY", "CHERRY"]

// // Filtering the array (getting a new array with elements that satisfy a condition)
const shortNamedFruits = fruits.filter(fruit => fruit.length <= 5);
console.log(shortNamedFruits); // Output: ["Apple"]











Practical/Hands-on Questions:



Basic JavaScript Questions

> What is JavaScript?

  Answer: JavaScript is a high-level, interpreted programming language used to create interactive effects within web browsers. It is commonly used for client-side scripting to enhance the functionality of web pages.

> What are the data types supported in JavaScript?

   Answer: JavaScript supports the following data types:

Primitive Types: Number, String, Boolean, Undefined, Null, Symbol (ES6), and BigInt (ES11).
Non-Primitive Type: Object (which includes Arrays, Functions, and Dates).



> Print the First 25 Even Numbers

for (let i = 0; i < 25; i++) {
    console.log(i * 2);
}


> Print First 25 Even Numbers in Reverse Order

for (let i = 24; i >= 0; i--) {
    console.log(i * 2);
}



> How do you declare a variable in JavaScript?

Answer: Variables can be declared using var, let, or const. For example:


let name = 'John'; // Variable that can be reassigned
const age = 30;   // Constant variable that cannot be reassigned
var city = 'New York'; // Function-scoped variable (use `let` or `const` instead)


> What is a function in JavaScript, and how do you declare one?

Answer: A function in JavaScript is a block of code designed to perform a particular task. It can be declared using the function keyword or as an arrow function. For example:

// Function declaration
function greet(name) {
    return `Hello, ${name}!`;
}

// Arrow function
const greet = (name) => `Hello, ${name}!`;



> What is the difference between == and === in JavaScript?

Answer: == is the equality operator that performs type coercion before comparing values. === is the strict equality operator that checks both value and type, without performing type coercion. For example:


5 == '5';   // true (type coercion occurs)
5 === '5';  // false (different types)


> What is an object in JavaScript?

Answer: An object in JavaScript is a collection of key-value pairs where the keys are strings (or Symbols) and the values can be of any data type. Objects are used to store and manage data in a structured way. For example:


const person = {
    name: 'Alice',
    age: 25,
    greet: function() {
        return `Hello, my name is ${this.name}`;
    }
};


> How do you create an array in JavaScript?

Answer: Arrays in JavaScript are used to store multiple values in a single variable. They can be created using square brackets []. For example:


const fruits = ['Apple', 'Banana', 'Cherry'];


> What is an event in JavaScript?

Answer: An event is an occurrence that can be detected by JavaScript, such as user interactions (e.g., clicks, key presses) or changes in the document. JavaScript can be used to handle these events using event listeners. For example:


document.getElementById('myButton').addEventListener('click', () => {
    alert('Button clicked!');
});


> What is a callback function?

Answer: A callback function is a function that is passed as an argument to another function and is executed after the completion of that function. Callbacks are commonly used for asynchronous operations. For example:


function fetchData(callback) {
    setTimeout(() => {
        const data = 'Data fetched';
        callback(data);
    }, 1000);
}

fetchData((data) => {
    console.log(data); // Output: Data fetched
});



> What is the difference between null and undefined in JavaScript?

Answer:

null is a special value assigned to variables as a placeholder to indicate that the variable has been intentionally left empty.
undefined is a value automatically assigned to variables that have been declared but not yet initialized.


> Create a function that alerts "Hello, World!" when a button is clicked.



>What is object destructuring?

Object destructuring is a JavaScript feature to extract object properties and bind these properties to variables. It can be used to extract several properties in a single statement and can reach properties from nested objects. When no property exists, object destructuring can set default values.



> Explain global variables in JavaScript.

A variable declared outside of a function definition is referred to as a global variable, and its scope is across your entire program. This implies that its value is accessible and adjustable throughout your program.


> Define the purpose of timers in JavaScript.

Timers can be used to execute the code at an exact time or repeat the code within an interval. This can be accomplished by employing the methods setTimeout, setInterval, and clearInterval.

> What is the use of the === operator?

The === operator is a strict comparison operator, meaning it checks for both the value and the type of two variables.


>How an HTML element is accessible in JavaScript code?

1. getElementById
Syntax: document.getElementById("elementId");

2. getElementsByClassName
Syntax: document.getElementsByClassName("className");

3. getElementsByTagName
Syntax: document.getElementsByTagName("tagName");

> What is the difference between undefined and null?
undefined: A variable that has been declared but not assigned a value yet. It is automatically assigned by JavaScript.
null: Represents the intentional absence of any object value. It must be explicitly assigne








<!-- First stage -->




How would you merge two arrays in JavaScript without duplicates?
Example: const array1 = [1, 2, 3], array2 = [2, 3, 4] -> [1, 2, 3, 4]


How would you find the maximum value in an array in JavaScript?
Given an array, how would you find the largest number in it?

Write a function to reverse a string in JavaScript.



Filter Even Numbers from an Array
Question: How would you filter out even numbers from an array in JavaScript?
Example: const numbers = [1, 2, 3, 4, 5, 6]
Output: [2, 4, 6]



Sum of All Elements in an Array
Question: How would you calculate the sum of all elements in an array in JavaScript?
Example: const numbers = [1, 2, 3, 4, 5]
Output: 15


Find All Unique Characters in a String
Question: How would you find all unique characters in a string in JavaScript?
Example: const str = "ababc"
Output: "abc"


```javascript
function uniqueCharacters(str) {
    return Array.from(new Set(str)).join('');
}

// Example usage
const str = "ababc";
const uniqueChars = uniqueCharacters(str);
console.log(uniqueChars); // Output: "abc"

```



Reverse the Words in a String
Question: How would you reverse the order of words in a string in JavaScript?
Example: const str = "hello world"
Output: "world hello"


```javascript
function reverseWords(str) {
    return str.split(' ').reverse().join(' ');
}

// Example usage
const str = "hello world";
const reversedWords = reverseWords(str);
console.log(reversedWords); // Output: "world hello"
```



 Find the Minimum Value in an Array
Question: How would you find the minimum value in an array in JavaScript?
Example: const numbers = [5, 1, 9, 3, 7]
Output: 1

```javascript
function findMinValue(array) {
    return Math.min(...array);
}

// Example usage
const numbers = [5, 1, 9, 3, 7];
const minValue = findMinValue(numbers);
console.log(minValue); // Output: 1

```

Find the Average of an Array
Question: How would you calculate the average of all elements in an array in JavaScript?
Example: const numbers = [10, 20, 30, 40]
Output: 25

```javascript
function calculateAverage(array) {
    const sum = array.reduce((accumulator, current) => accumulator + current, 0);
    return sum / array.length;
}

// Example usage
const numbers = [10, 20, 30, 40];
const average = calculateAverage(numbers);
console.log(average); // Output: 25
```



Sort an Array in Ascending Order
Question: How would you sort an array in ascending order in JavaScript?
Example: const numbers = [4, 1, 7, 3, 5]
Output: [1, 3, 4, 5, 7]


```javascript
function sortArray(array) {
    return array.slice().sort((a, b) => a - b);
}

// Example usage
const numbers = [4, 1, 7, 3, 5];
const sortedArray = sortArray(numbers);
console.log(sortedArray); // Output: [1, 3, 4, 5, 7]

```


> How do you reverse a number in JavaScript?


function reverseNumber(n) {
  return parseInt(n.toString().split('').reverse().join(''));
}

console.log(reverseNumber(12345));  // Result: 54321




 Sorting an Array of Numbers (Descending Order):
To sort numbers in descending order, you can reverse the comparison:

javascript
Copy code
let numbers = [3, 8, 1, 6, 4, 2];
numbers.sort((a, b) => b - a);  // Descending order

console.log(numbers);  // Result: [8, 6, 4, 3, 2, 1]



the array let fruits = ['apple', 'orange', 'banana', 'mango']; in JavaScript:

1. Accessing Elements:
How do you access the second element in the array fruits?

Answer: fruits[1] (arrays are zero-indexed in JavaScript).
2. Finding the Length of an Array:
How do you find the number of elements in the fruits array?

Answer: fruits.length will return 4.
3. Adding an Element to the End of the Array:
How do you add the element 'grape' to the end of the fruits array?

Answer: fruits.push('grape');
4. Removing the Last Element from the Array:
How do you remove the last element ('mango') from the fruits array?

Answer: fruits.pop();
5. Adding an Element to the Beginning of the Array:
How do you add the element 'kiwi' to the beginning of the fruits array?

Answer: fruits.unshift('kiwi');
6. Removing the First Element from the Array:
How do you remove the first element ('apple') from the fruits array?

Answer: fruits.shift();
7. Sorting the Array:
How do you sort the fruits array in alphabetical order?

Answer: fruits.sort();
Result: ['apple', 'banana', 'mango', 'orange']
8. Reversing the Array:
How do you reverse the order of elements in the fruits array?

Answer: fruits.reverse();
9. Slicing the Array:
How do you create a new array from the fruits array containing only the first two elements?

Answer: fruits.slice(0, 2);
Result: ['apple', 'orange']
10. Filtering the Array:
How do you filter out all fruits whose names contain more than 5 characters?

Answer: fruits.filter(fruit => fruit.length > 5);
Result: ['orange', 'banana']
11. Checking if an Element Exists:
How do you check if 'apple' is present in the fruits array?

Answer: fruits.includes('apple');
Result: true
12. Finding the Index of an Element:
How do you find the index of 'banana' in the fruits array?

Answer: fruits.indexOf('banana');
Result: 2
13. Joining the Array into a String:
How do you join all elements of the fruits array into a single string, separated by commas?

Answer: fruits.join(', ');
Result: 'apple, orange, banana, mango'
14. Replacing an Element in the Array:
How do you replace 'orange' with 'pineapple' in the fruits array?

Answer: fruits[1] = 'pineapple';
Result: ['apple', 'pineapple', 'banana', 'mango']









Why are promises used in JavaScript?


Promises help in managing asynchronous operations, such as server requests in JavaScript. Earlier, callbacks were used for the same purpose. However, callbacks have limited functionality and, thus, can make the code unmanageable. There are four states of the promise object:

Pending: This is the first state of the promise and shows that the promise has been neither fulfilled nor rejected.

Fulfilled: This state represents the completion of the asynchronous operation. In other words, the promise has been fulfilled.

Rejected: This state represents the failure of the asynchronous operation due to some reason. In other words, the promise has been rejected.

Settled: This is the last state of the promise, showing that the promise has been either fulfilled or rejected.

A promise constructor uses a callback with two parameters - resolve and reject - to create a promise. The resolve function is called when the asynchronous operation has succeeded. The reject function is called when the asynchronous operation has failed.