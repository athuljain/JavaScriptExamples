What is a Promise?
A Promise is an object that represents the eventual result of an asynchronous operation.

It can be in one of three states:
pending: Initial state, not fulfilled or rejected.
fulfilled: Operation completed successfully.
rejected: Operation failed.

const myPromise = new Promise((resolve, reject) => {
    let success = true;

    if (success) {
        resolve("Success message!");
    } else {
        reject("Failure message!");
    }
});


myPromise
    .then(result => {
        console.log("Resolved:", result);      // Success path
    })
    .catch(error => {
        console.log("Rejected:", error);       // Error path
    })
    .finally(() => {
        console.log("Finished executing.");    // Runs always
    });


------------------------------------------------------------------


ASYNC / AWAIT â€” SIMPLIFIED PROMISE HANDLING
ðŸ”¹ Syntax and Behavior:
async: Marks a function as asynchronous, returns a Promise.

await: Pauses the async function until a Promise is resolved/rejected.

async function fetchData() {
    try {
        const response = await myPromise;  // Wait for result
        console.log("Data:", response);
    } catch (err) {
        console.error("Error:", err);
    } finally {
        console.log("Done.");
    }
}

fetchData();



Concept	Description
new Promise() =	Creates a Promise object
.then() =	Handles resolved result
.catch() =	Handles error
.finally() =	Runs always
async/await	 = Cleaner syntax for handling Promises
Promise.all() =	Waits for all to complete
Promise.race() =	Resolves/rejects with the first one
Promise.allSettled() =	Gets results of all
Promise.any() =	Resolves with first fulfilled